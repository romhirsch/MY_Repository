
from elasticsearch import Elasticsearch, helpers
import os
import csv
import datetime
import calendar
import re


def convert_date(in_date):
    try:
        [d, m, y] = in_date.split("-")
        return datetime.datetime.strptime("-".join([d, m, "20"+y]), '%d-%b-%Y')
    except:
        print in_date


def convert_date2(in_date):
    try:
        return datetime.datetime.strptime(in_date, "%d/%m/%Y %H:%M:%S")
    except:
        print in_date


def set_main_modality(modalities):
        for irrelevant_modality in ["SR", "OT", "SD", "PR", "DOC", "KO", "RG", "AU", ""]:
            if irrelevant_modality in modalities:
                modalities.remove(irrelevant_modality)
        if len(modalities) == 0:
            main_modality = "Unknown"
        elif len(modalities) == 1:
            if modalities[0] in ["CR", "DR", "DX", "XR", "DEXA", "ECG"]:
                main_modality = "X-Ray"
            elif modalities[0] in ["MG", "US", "CT", "NM", "MR"]:
                main_modality = modalities[0]
            elif modalities[0] in ["PT"]:
                main_modality = "PT-CT"
            elif modalities[0] in ["XA", "RF", "XACR", "XAXACR"]:
                main_modality = "XA\RF"
            else:
                main_modality = "Unknown"
        else:
            if "XA" in modalities or "RF" in modalities:
                main_modality = "XA\RF"
            elif "PT" in modalities:
                main_modality = "PT-CT"
            elif "MR" in modalities:
                main_modality = "MR"
            elif "MG" in modalities:
                main_modality = "MG"  # 42 US\MG -> MG
            elif "US" in modalities: # 21 US\CT -> Unknown; 55 US\CR -> Unknown
                main_modality = "Unknown"
            elif "ECG" in modalities:
                main_modality = "X-Ray"  # 442 ECG\CT -> X-Ray
            elif "CT" in modalities:
                main_modality = "CT"  # 10 ST\CR -> CT;  109 SC\CT -> CT
            elif len(set(modalities) - {"CR", "DR", "DX", "XR"}) == 0:
                main_modality = "X-Ray"
            else:
                main_modality = "Unknown"
        return main_modality


es = Elasticsearch(host='10.2.29.57', http_auth=('elastic', 's2e3a1r4c3h6'))
#root_path = r"\\matany10\share\US_CLOUD_ACCESS_TO_STUDIES\queries_output\csv_outputs"
root_path = r"C:\Users\limora\Desktop\cloud_data"
index_name = "cloud3"

dumps_count = 1
for subdir, dirs, files in os.walk(root_path):
    # if subdir.endswith("_part2"):
        for filename in files:
            records = []
            filepath = subdir + os.sep + filename
            with open(filepath, mode="r") as f:
                for record in csv.DictReader(f):
                    try:
                        _id = "#" + " #".join([record["STUDY_INSTANCE_UID"], record["LAST_IMAGE_INSERT_TIME"], record["EVENT_DATE"], record["LAST_ACCESS_TIME"], record["LAST_IMAGE_INSERT_TIME"], record["STUDY_DATE"]])
                        record["EVENT_DATE"] = convert_date2(record["EVENT_DATE"])
                        record["LAST_ACCESS_TIME"] = convert_date2(record["LAST_ACCESS_TIME"])
                        record["LAST_IMAGE_INSERT_TIME"] = convert_date2(record["LAST_IMAGE_INSERT_TIME"])
                        record["STUDY_DATE"] = convert_date2(record["STUDY_DATE"])
                        record["MODALITIES"] = record["STUDY_MODALITY"][1:-1].split("\\")
                        record["MAIN_MODALITY"] = set_main_modality(record["MODALITIES"])
                        record["LOAD_HOUR_OF_DAY"] = record["EVENT_DATE"].hour
                        record["LOAD_DAY_OF_WEEK"] = calendar.day_name[record["EVENT_DATE"].weekday()]
                        record["LOAD_IN_WEEKEND"] = record["LOAD_DAY_OF_WEEK"] in ["Sunday", "Saturday"]
                        record["INSERT_HOUR_OF_DAY"] = record["STUDY_DATE"].hour
                        record["INSERT_DAY_OF_WEEK"] = calendar.day_name[record["STUDY_DATE"].weekday()]
                        record["INSERT_IN_WEEKEND"] = record["INSERT_DAY_OF_WEEK"] in ["Sunday", "Saturday"]
                        record["LOAD_TYPE"] = "Prior load" if record["DESCRIPTION"].endswith("Instances Sent") else "Regular load"
                        #record["LOAD_YEAR"] =
                        #record["STORE_YEAR"] =
                        # record["ACCESSED_INSTANCES"] = re.findall("Access to ([0-9]*) instances", record["DESCRIPTION"])
                        records.append({"_id": _id, "_source": record})
                    except:
                        print("exeption in row" + str(record))
                        a = 1
                    if len(records) == 50000:
                        res = helpers.bulk(es, records, index=index_name)
                        print str(dumps_count) + " - " + str(res) + ". File:" + filepath
                        dumps_count += 1
                        records = []
                res = helpers.bulk(es, records, index=index_name)
                print str(dumps_count) + " - " + str(res) + ". File:" + filepath
                dumps_count += 1
