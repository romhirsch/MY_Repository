LIBRARY ieee;
USE ieee.std_logic_1164.all;
LIBRARY altera_mf;
USE altera_mf.altera_mf_components.all;
use ieee.std_logic_unsigned.all;
use ieee.std_logic_arith.all;

ENTITY lab4 IS
	generic (data_size: positive:=4;
		log2_of_fifo_depth:integer);
	PORT
	(
		clk		: IN STD_LOGIC;
		wd			: IN STD_LOGIC_VECTOR (data_size-1 DOWNTO 0); --write data 
		wr			: IN STD_LOGIC; -- write valid
		rr			: IN STD_LOGIC; -- read valid 
		rst 		: IN STD_LOGIC;
		fifo_empty  : OUT STD_LOGIC; 
		fifo_full   : OUT STD_LOGIC;  
		rd 			: OUT STD_LOGIC_VECTOR (data_size-1 DOWNTO 0) -- READ DATA 
	);
END lab4;

ARCHITECTURE SYN OF lab4 IS

	type ram_type is array (2**log2_of_fifo_depth downto 0) of std_logic_vector(data_size-1 downto 0);
	signal ram_fifo : ram_type;
	signal wp,rp    : std_logic_vector (log2_of_fifo_depth downto 0);
BEGIN 

process(clk,rst) is 
begin 
	if(rst='0') then 
		wp	<=(others=>'0');
		rp	<=(others=>'0');
	elsif rising_edge(clk) then 
		wp	<= wp + wr;
		rp  <= rp + rr; 
		
		if wr='1' then 
			ram_fifo(conv_integer(unsigned(wp(wp'left-1 downto 0)))) <= wd;
		end if;

		if rr='1' then 
			rd<=ram_fifo(conv_integer(unsigned(rp(rp'left-1 downto 0))));
		end if;
		
		if wp(wp'left) = '1' and rp(rp'left) = '0' then 
			fifo_full<='1';
		elsif (wp=rp) then 
			fifo_empty<='1';
		end if;
		
	end if;
	
end process;

end architecture; 

